from telethon import TelegramClient
from telethon.tl.types import InputPeerChannel
from dotenv import load_dotenv
import os
import asyncio
import json
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsRecent
from telethon.tl.custom.button import Button

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ACCESS_HASH = int(os.getenv("ACCESS_HASH"))

client = TelegramClient("userbot", API_ID, API_HASH)
DATA_FILE = "users.json"

async def load_users():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r") as f:
                return set(json.load(f))
        except json.JSONDecodeError:
            print("‚ö†Ô∏è users.json –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ‚Äî —Å–æ–∑–¥–∞—é –∑–∞–Ω–æ–≤–æ.")
            return set()
    return set()

async def save_users(data):
    with open(DATA_FILE, "w") as f:
        json.dump(list(data), f)

async def send_welcome(user):
    try:
        video_path = "assets/intro.mp4"
        caption = (
            "–ò–ª—Ç–∏–º–æ—Å, “≥–æ–∑–∏—Ä–æ“õ 5 –¥–∞“õ–∏“õ–∞ –∏—á–∏–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∏–º–∏–∑–≥–∞ —ë–∑–∏–Ω–≥,\n"
            "–∞–∫—Å “≥–æ–ª–¥–∞ –∞—Ä–∏–∑–∞–Ω–≥–∏–∑ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–∞–¥–∏.\n"
            "üìå –ë—É —Å–∏–∑–Ω–∏–Ω–≥ –∫—Ä–µ–¥–∏—Ç–Ω–∏ –æ–ª–∏—à–∏–Ω–≥–∏–∑ —É—á—É–Ω —Å”Ø–Ω–≥–≥–∏ “õ–∞–¥–∞–º.\n"
            "“≤–æ–∑–∏—Ä —ë–∑–∏–Ω–≥! ‚è≥üëáüëáüëá"
        )

        await client.send_file(
            user.id,
            video_path,
            caption=caption
        )

        await client.send_message(
            user.id,
            "üì© [–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º](https://t.me/manager_uzi)",
            parse_mode="markdown"
        )
    except Exception as e:
        print(f"‚õî {user.id} ‚Äî –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")

async def check_new():
    entity = InputPeerChannel(channel_id=CHANNEL_ID, access_hash=ACCESS_HASH)
    known = await load_users()
    updated = set(known)

    participants = await client(GetParticipantsRequest(
        channel=entity,
        filter=ChannelParticipantsRecent(),
        offset=0,
        limit=100,
        hash=0
    ))

    is_first_run = len(known) == 0

    for user in participants.users:
        if user.bot or user.deleted:
            continue
        if str(user.id) not in known:
            print(f"üîä –ù–æ–≤—ã–π: {user.first_name}")

            if not is_first_run:
                await send_welcome(user)

            updated.add(str(user.id))

    await save_users(updated)

async def main():
    await client.start()
    while True:
        await check_new()
        await asyncio.sleep(10)

client.loop.run_until_complete(main())
